#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <ctime>

using namespace std;

struct Task {
    string description;
    string category;
    int priority;
    time_t deadline;
};

// Улучшенный парсер даты с обработкой ошибок
time_t parseDate(const string& dateStr) {
    tm tm_deadline = {};
    if (strptime(dateStr.c_str(), "%d.%m.%Y", &tm_deadline) == nullptr) {
        return -1; // Возвращаем -1 в случае неправильного формата
    }
    return mktime(&tm_deadline);
}

void addTask(vector<Task>& tasks) {
    Task newTask;
    cout << "Описание задачи: ";
    getline(cin >> ws, newTask.description);
    cout << "Категория: ";
    getline(cin >> ws, newTask.category);
    cout << "Приоритет (1-низкий, 2-средний, 3-высокий): ";
    cin >> newTask.priority;
    cin.ignore();

    string dateStr;
    while (true) {
        cout << "Срок выполнения (ДД.ММ.ГГГГ): ";
        getline(cin >> ws, dateStr);
        newTask.deadline = parseDate(dateStr);
        if (newTask.deadline != -1) break;
        cerr << "Неверный формат даты. Попробуйте снова.\n";
    }

    tasks.push_back(newTask);
    cout << "Задача добавлена!\n";
}

void printTasks(const vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "Нет задач.\n";
        return;
    }
    for (const auto& task : tasks) {
        cout << "Описание задачи: " << task.description << endl;
        cout << "Категория: " << task.category << endl;
        cout << "Приоритет: " << task.priority << endl;
        char buffer[80];
        strftime(buffer, sizeof(buffer), "%d.%m.%Y", localtime(&task.deadline));
        cout << "Срок: " << buffer << endl;
        cout << "----\n";
    }
}

// Словарь записей
map<time_t, string> entries;

void addEntry(const string& dateStr, const string& entry) {
    time_t date = parseDate(dateStr);
    if (date != -1) {
        entries[date] = entry;
        cout << "Запись добавлена!\n";
    } else {
        cerr << "Неверный формат даты. Запись не добавлена.\n";
    }
}

void printEntries() {
    if (entries.empty()) {
        cout << "Нет записей.\n";
        return;
    }
    for (const auto& entry : entries) {
        char buffer[80];
        strftime(buffer, sizeof(buffer), "%d.%m.%Y", localtime(&entry.first));
        cout << "Запись на " << buffer << ": " << entry.second << endl;
    }
}

void viewEntriesByYear(int year) {
    bool found = false;
    for (const auto& entry : entries) {
        tm* tm_entry = localtime(&entry.first);
        if (tm_entry->tm_year + 1900 == year) {
            char buffer[80];
            strftime(buffer, sizeof(buffer), "%d.%m.%Y", tm_entry);
            cout << "Запись на " << buffer << ": " << entry.second << endl;
            found = true;
        }
    }
    if (!found) {
        cout << "Записи за " << year << " не найдены.\n";
    }
}

void printTasksAndEntries(const vector<Task>& tasks) {
    cout << "\nЗадачи:\n";
    printTasks(tasks); // Печатаем задачи
    cout << "Записи:\n";
    printEntries(); // Печатаем записи
}

int main() {
    vector<Task> tasks;
    setlocale(LC_ALL, "Russian");
    int choice;

    do {
        cout << "\nМеню:\n";
        cout << "1. Добавить задачу\n";
        cout << "2. Вывести задачи\n";
        cout << "3. Добавить запись\n";
        cout << "4. Просмотреть записи по году\n";
        cout << "5. Вывести задачи и записи\n";
        cout << "0. Выход\n";
        cout << "Выбор: ";
        cin >> choice;
        cin.ignore();

        switch (choice) {
            case 1: addTask(tasks); break; // Добавляем задачу
            case 2: printTasks(tasks); break; // Печатаем задачи
            case 3: { // Добавляем запись
                string dateStr, entry;
                cout << "Введите дату (ДД.ММ.ГГГГ): ";
                getline(cin >> ws, dateStr);
                cout << "Введите запись: ";
                getline(cin >> ws, entry);
                addEntry(dateStr, entry);
                break;
            }
            case 4: { // Просматриваем записи по году
                int year;
                cout << "Введите год для просмотра записей: ";
                cin >> year;
                viewEntriesByYear(year);
                break;
            }
            case 5: printTasksAndEntries(tasks); break; // Печатаем задачи и записи
            case 0: cout << "До свидания!\n"; break;
            default: cout << "Неверный выбор.\n";
        }
    } while (choice != 0);
    
    return 0;
}
