#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <ctime>
#include <locale>

using namespace std;

struct Task {
    string description;
    string category;
    int priority = 0; // Инициализируем приоритет
    time_t deadline = 0; // Инициализируем срок выполнения

    Task() : description(""), category(""), priority(0), deadline(0) {}
};

time_t parseDate(const string& dateStr) {
    tm tm_deadline = {};
    istringstream ss(dateStr);
    ss.imbue(locale("ru_RU.UTF-8"));
    ss >> get_time(&tm_deadline, "%d.%m.%Y");
    if (ss.fail()) {
        return -1;
    }
    return mktime(&tm_deadline);
}

void addTask(vector<Task>& tasks) {
    Task newTask;
    cout << "Описание задачи: ";
    cin.ignore();
    getline(cin, newTask.description);
    cout << "Категория: ";
    getline(cin, newTask.category);
    cout << "Приоритет (1-низкий, 2-средний, 3-высокий): ";
    cin >> newTask.priority;
    cin.ignore();

    string dateStr;
    while (true) {
        cout << "Срок выполнения (ДД.ММ.ГГГГ): ";
        getline(cin, dateStr);
        newTask.deadline = parseDate(dateStr);
        if (newTask.deadline != -1) break;
        cerr << "Неверный формат даты. Попробуйте снова.\n";
    }

    tasks.push_back(newTask);
    cout << "Задача добавлена!\n";
}

void printTasks(const vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "Нет задач.\n";
        return;
    }
    for (const auto& task : tasks) {
        cout << "Описание задачи: " << task.description << endl;
        cout << "Категория: " << task.category << endl;
        cout << "Приоритет: " << task.priority << endl;
        char buffer[80];
        tm tm_deadline;
        localtime_s(&tm_deadline, &task.deadline); // Используем localtime_s
        strftime(buffer, sizeof(buffer), "%d.%m.%Y", &tm_deadline);
        cout << "Срок: " << buffer << endl;
        cout << "----\n";
    }
}

map<time_t, string> entries;

void addEntry(const string& dateStr, const string& entry) {
    time_t date = parseDate(dateStr);
    if (date != -1) {
        entries[date] = entry;
        cout << "Запись добавлена!\n";
    }
    else {
        cerr << "Неверный формат даты. Запись не добавлена.\n";
    }
}

void printEntries() {
    if (entries.empty()) {
        cout << "Нет записей.\n";
        return;
    }
    for (const auto& entry : entries) {
        char buffer[80];
        tm tm_entry;
        localtime_s(&tm_entry, &entry.first); // Используем localtime_s
        strftime(buffer, sizeof(buffer), "%d.%m.%Y", &tm_entry);
        cout << "Запись на " << buffer << ": " << entry.second << endl;
    }
}

void viewEntriesByYear(int year) {
    bool found = false;
    for (const auto& entry : entries) {
        tm tm_entry;
        localtime_s(&tm_entry, &entry.first); // Используем localtime_s
        if (tm_entry.tm_year + 1900 == year) {
            char buffer[80];
            strftime(buffer, sizeof(buffer), "%d.%m.%Y", &tm_entry);
            cout << "Запись на " << buffer << ": " << entry.second << endl;
            found = true;
        }
    }
    if (!found) {
        cout << "Записи за " << year << " не найдены.\n";
    }
}

void printTasksAndEntries(const vector<Task>& tasks) {
    cout << "\nЗадачи:\n";
    printTasks(tasks);
    cout << "Записи:\n";
    printEntries();
}

int main() {
    vector<Task> tasks;
    setlocale(LC_ALL, "Russian");
    int choice;

    do {
        cout << "\nМеню:\n";
        cout << "1. Добавить задачу\n";
        cout << "2. Вывести задачи\n";
        cout << "3. Добавить запись\n";
        cout << "4. Просмотреть записи по году\n";
        cout << "5. Вывести задачи и записи\n";
        cout << "0. Выход\n";
        cout << "Выбор: ";
        cin >> choice;
        cin.ignore();

        switch (choice) {
        case 1: addTask(tasks); break;
        case 2: printTasks(tasks); break;
        case 3: {
            string dateStr, entry;
            cout << "Введите дату (ДД.ММ.ГГГГ): ";
            getline(cin, dateStr);
            cout << "Введите запись: ";
            getline(cin, entry);
            addEntry(dateStr, entry);
            break;
        }
        case 4: {
            int year;
            cout << "Введите год для просмотра записей: ";
            cin >> year;
            cin.ignore();
            viewEntriesByYear(year);
            break;
        }
        case 5: printTasksAndEntries(tasks); break;
        case 0: cout << "До свидания!\n"; break;
        default: cout << "Неверный выбор.\n";
        }
    } while (choice != 0);

    return 0;
}
